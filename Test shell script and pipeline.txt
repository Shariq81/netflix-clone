There was a conflict for the port 8081 binding due to existing container using it. This script tested how to remove the existing containers. 

=======================================SHELL SCRIPT ======================================================================================

#!/bin/bash

# Define the Docker container name
CONTAINER_NAME="netflix"
# Define a default port number
DEPLOY_PORT="8081"

# Stop and remove any existing containers created from the same image
IMAGE_NAME="shariq81/netflix:latest"
docker ps -a --filter "ancestor=$IMAGE_NAME" --format "{{.ID}}" | xargs -r docker stop
docker ps -a --filter "ancestor=$IMAGE_NAME" --format "{{.ID}}" | xargs -r docker rm

# Stop and remove the existing container if it exists
checkContainer=$(docker ps -q -f name="$CONTAINER_NAME")
if [ ! -z "$checkContainer" ]; then
    echo "Stopping and removing existing container $CONTAINER_NAME"
    docker stop "$CONTAINER_NAME"
    docker rm "$CONTAINER_NAME"
fi

# Deploy the new container
docker run -d -p $DEPLOY_PORT:80 --name $CONTAINER_NAME $IMAGE_NAME


=======================================PIPELINE============================================================================================

pipeline {
    agent any

    environment {
        IMAGE_NAME = 'shariq81/netflix:latest'
        CONTAINER_NAME = 'netflix'
        DEPLOY_PORT = '8081'
    }

    stages {
        stage('Prepare and Deploy Docker Container') {
            steps {
                script {
                    // Check for any existing containers from the same image
                    echo "Checking for containers created from the image ${IMAGE_NAME}"
                    def existingContainers = sh(script: "docker ps -a --filter ancestor=${IMAGE_NAME} --format '{{.ID}}'", returnStdout: true).trim()
                    
                    if (existingContainers) {
                        // If containers exist, stop and remove them
                        echo "Stopping and removing containers created from the image ${IMAGE_NAME}"
                        existingContainers.tokenize().each { containerId ->
                            sh "docker stop ${containerId}"
                            sh "docker rm ${containerId}"
                        }
                    } else {
                        echo "No existing containers to remove."
                    }

                    // Check and remove the container by name if it exists
                    def checkContainer = sh(script: "docker ps -q -f name=${CONTAINER_NAME}", returnStdout: true).trim()
                    if (checkContainer) {
                        echo "Stopping and removing existing container ${CONTAINER_NAME}"
                        sh "docker stop ${CONTAINER_NAME}"
                        sh "docker rm ${CONTAINER_NAME}"
                    }

                    // Deploy the new container
                    echo "Deploying new container ${CONTAINER_NAME}"
                    sh "docker run -d -p ${DEPLOY_PORT}:80 --name ${CONTAINER_NAME} ${IMAGE_NAME}"
                }
            }
        }
    }
}


==========================================================INCLUDE TMDB API IF USING FRESH IMAGE======================================================

pipeline {
    agent any

    environment {
        IMAGE_NAME = 'shariq81/netflix'
        CONTAINER_NAME = 'netflix'
        DEPLOY_PORT = '8081'
        TMDB_API_KEY = '176920b2581cd914f444e2aaf0f977ce'
        VERSION = 'latest' // Or dynamically set based on your versioning scheme
    }

    stages {
        stage('Build and Push Docker Image') {
            steps {
                script {
                    echo "Building Docker image with TMDB API Key"
                    sh "docker build --build-arg TMDB_V3_API_KEY=${TMDB_API_KEY} -t ${IMAGE_NAME}:${VERSION} ."
                    withDockerRegistry([credentialsId: 'dockerHubCredentialsId', url: '']) {
                        echo "Pushing Docker image to Docker Hub"
                        sh "docker push ${IMAGE_NAME}:${VERSION}"
                    }
                }
            }
        }
        stage('Prepare and Deploy Docker Container') {
            steps {
                script {
                    // Check for any existing containers from the same image
                    echo "Checking for containers created from the image ${IMAGE_NAME}:${VERSION}"
                    def existingContainers = sh(script: "docker ps -a --filter ancestor=${IMAGE_NAME}:${VERSION} --format '{{.ID}}'", returnStdout: true).trim()
                    
                    if (existingContainers) {
                        // If containers exist, stop and remove them
                        echo "Stopping and removing containers created from the image ${IMAGE_NAME}:${VERSION}"
                        existingContainers.tokenize().each { containerId ->
                            sh "docker stop ${containerId}"
                            sh "docker rm ${containerId}"
                        }
                    } else {
                        echo "No existing containers to remove."
                    }

                    // Check and remove the container by name if it exists
                    def checkContainer = sh(script: "docker ps -q -f name=${CONTAINER_NAME}", returnStdout: true).trim()
                    if (checkContainer) {
                        echo "Stopping and removing existing container ${CONTAINER_NAME}"
                        sh "docker stop ${CONTAINER_NAME}"
                        sh "docker rm ${CONTAINER_NAME}"
                    }

                    // Deploy the new container
                    echo "Deploying new container ${CONTAINER_NAME}"
                    sh "docker run -d -p ${DEPLOY_PORT}:80 --name ${CONTAINER_NAME} ${IMAGE_NAME}:${VERSION}"
                }
            }
        }
    }
}

